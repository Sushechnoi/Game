import pygame
import sys
import time
import random


def load_image(name, colorkey=None):
    fullname = os.path.join('data', name)
    # если файл не существует, то выходим
    if not os.path.isfile(fullname):
        print(f"Файл с изображением '{fullname}' не найден")
        sys.exit()
    image = pygame.image.load(fullname)
    if colorkey is not None:
        image = image.convert()
        if colorkey == -1:
            colorkey = image.get_at((0, 0))
        image.set_colorkey(colorkey)
    else:
        image = image.convert_alpha()
    return image

class Osnova():

    def __init__(self):
        # размеры экрана
        self.width = 1200
        self.height = 650

        # цвета
        self.red = pygame.Color(255, 0, 0)
        self.green = pygame.Color(0, 255, 0)
        self.black = pygame.Color(0, 0, 0)
        self.brown = pygame.Color(165, 42, 42)
        self.blackgreen = pygame.Color(1, 100, 32)

        # будет задавать количество кадров в секунду
        self.fps = pygame.time.Clock()

        # переменная для оторбражения результата
        # (сколько еды съели)
        self.score = 0

    def mistakes(self):
        errors = pygame.init()
        if errors[1] > 0:
            sys.exit()

    def surface(self):
        self.surface = pygame.display.set_mode((
            self.width, self.height))
        pygame.display.set_caption('Грёбаная змейка')

    def event(self, move):

        # запускаем цикл по ивентам
        for event in pygame.event.get():
            # если нажали клавишу
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RIGHT or event.key == pygame.K_d:
                    move = "RIGHT"
                elif event.key == pygame.K_LEFT or event.key == pygame.K_a:
                    move = "LEFT"
                elif event.key == pygame.K_UP or event.key == pygame.K_w:
                    move = "UP"
                elif event.key == pygame.K_DOWN or event.key == pygame.K_s:
                    move = "DOWN"
                # нажали escape!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                elif event.key == pygame.K_ESCAPE or event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
        return move

    def update(self):
        # обновляем всё
        pygame.display.flip()
        game.fps.tick(13)

    def ourscore(self, place=1):
        # Отображение результата
        s_font = pygame.font.SysFont('monaco', 24)
        s_surf = s_font.render(
            'Счёт: {0}'.format(self.score), True, self.black)
        s_rect = s_surf.get_rect()
        # результат слева сверху
        if place == 1:
            s_rect.midtop = (80, 10)
        # надпись по центру
        else:
            s_rect.midtop = (600, 300)
        # рисуем прямоугольник поверх surface
        self.surface.blit(s_surf, s_rect)

    def gameover(self):
        # при поражении
        font = pygame.font.SysFont('green', 72)
        go_surf = font.render('You lose', True, self.red)
        stayrect = go_surf.get_rect()
        stayrect.midtop = (600, 250)
        self.surface.blit(go_surf, stayrect)
        self.ourscore(0)
        pygame.display.flip()
        time.sleep(3)
        pygame.quit()
        sys.exit()


class Food():
    def __init__(self, food_color, width, height):
        # Инииализация  еды
        self.food_color = food_color
        self.food_size_x = 10
        self.food_size_y = 10
        self.food_pos = [random.randrange(1, width / 10) * 10,
                         random.randrange(1, height / 10) * 10]

    def draw_food(self, surface):
        # Отображение еды
        pygame.draw.rect(
            surface, self.food_color, pygame.Rect(
                self.food_pos[0], self.food_pos[1],
                self.food_size_x, self.food_size_y))


class Snake():

    def __init__(self, snake_color):
        # важные переменные - позиция головы змеи и его тела
        self.head = [100, 50]  # [x, y]
        # начальное тело змеи состоит из трех сегментов
        # голова змеи - первый элемент, хвост - последний
        self.snake_body = [[100, 50], [90, 50], [80, 50]]
        self.snake_color = snake_color
        # направление движение змеи, изначально
        # зададимся вправо
        self.direction = "RIGHT"
        # куда будет меняться напрвление движения змеи
        # при нажатии соответствующих клавиш
        self.change_to = self.direction

    def validate_direction_and_change(self):
        # Изменияем направление движения змеи только в том случае,
        # если оно не прямо противоположно текущему
        if any((self.change_to == "RIGHT" and not self.direction == "LEFT",
                self.change_to == "LEFT" and not self.direction == "RIGHT",
                self.change_to == "UP" and not self.direction == "DOWN",
                self.change_to == "DOWN" and not self.direction == "UP")):
            self.direction = self.change_to

    def change_head_position(self):
        # Изменияем положение головы змеи
        if self.direction == "RIGHT":
            self.head[0] += 10
        elif self.direction == "LEFT":
            self.head[0] -= 10
        elif self.direction == "UP":
            self.head[1] -= 10
        elif self.direction == "DOWN":
            self.head[1] += 10

    def mechanism(
            self, score, food_pos, width, height):
        #
        self.snake_body.insert(0, list(self.head))
        # если съели еду
        if (self.head[0] == food_pos[0] and
                self.head[1] == food_pos[1]):
            # если съели еду то задаем новое положение еды случайным
            # образом и увеличивем score на один
            food_pos = [random.randrange(1, width / 10) * 10,
                        random.randrange(1, height / 10) * 10]
            score += 1
        else:
            # если не нашли еду, то убираем последний сегмент,
            # если этого не сделать, то змея будет постоянно расти
            self.snake_body.pop()
        return score, food_pos

    def draw_snake(self, surface, color):
        # Отображаем змею
        surface.fill(color)
        for pos in self.snake_body:
            pygame.draw.rect(
                surface, self.snake_color, pygame.Rect(
                    pos[0], pos[1], 10, 10))

    def border(self, game_over, screen_width, screen_height):
        # Проверка, что столкунлись с концами экрана или сами с собой
        if any((
                self.head[0] > screen_width - 10
                or self.head[0] < 0,
                self.head[1] > screen_height - 10
                or self.head[1] < 0
        )):
            game_over()
        for block in self.snake_body[1:]:
            # проверка на то, что первый элемент(голова) врезался в
            # любой другой элемент змеи (закольцевались)
            if (block[0] == self.head[0] and
                    block[1] == self.head[1]):
                game_over()


game = Osnova()
snake = Snake(game.blackgreen)
food = Food(game.brown, game.width, game.height)

game.mistakes()
game.surface()

running = True

while running:
    snake.change_to = game.event(snake.change_to)

    snake.validate_direction_and_change()
    snake.change_head_position()
    game.score, food.food_pos = snake.mechanism(
        game.score, food.food_pos, game.width, game.height)
    snake.draw_snake(game.surface, game.green)

    food.draw_food(game.surface)

    snake.border(
        game.gameover, game.width, game.height)

    game.ourscore()
    game.update()
